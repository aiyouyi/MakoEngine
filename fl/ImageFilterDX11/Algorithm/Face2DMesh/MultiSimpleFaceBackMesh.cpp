#include <fstream>
#include "MultiSimpleFaceBackMesh.h"

namespace mt3dface
{
	
	void MultiSimpleFaceBackMesh::setMemberInit()
	{
		m_numLandmark = 106;
		m_numOfSimpleFaceMeshV = 329;
		m_nNumOfFacePt = 259;

		// simpleMesh
		std::vector<short3D> simpleMeshIndex = {
			2,135,1,3,2,4,71,37,75,38,75,37,162,83,165,82,165,83,139,4,5,26,163,25,139,5,6,228,82,80,142,6,7,215,100,222,104,222,100,147,148,143,78,144,227,189,227,144,11,10,12,146,10,11,231,15,232,16,232,15,146,11,12,190,213,191,214,191,213,230,12,13,231,13,14,231,14,15,142,143,140,141,140,143,232,16,17,233,17,18,177,38,54,176,54,38,233,18,19,129,76,73,74,73,76,234,19,20,167,20,21,22,21,23,167,21,22,39,38,36,37,36,38,40,35,41,34,41,35,35,39,36,160,26,27,160,27,28,58,133,57,131,57,133,171,41,51,156,30,31,43,50,49,181,49,50,117,116,115,108,115,116,109,114,115,34,115,114,119,37,42,71,42,37,41,34,33,114,33,34,107,108,116,118,119,120,121,120,119,115,34,35,116,118,107,106,107,118,117,35,36,119,36,37,48,43,49,130,55,131,56,131,55,175,38,39,40,39,35,174,39,40,172,40,41,48,64,47,185,47,64,119,118,116,50,43,42,121,42,43,118,120,106,110,106,120,44,47,45,46,45,47,48,44,43,123,43,44,123,124,122,111,122,124,35,117,115,124,44,45,123,44,124,125,45,46,48,47,44,183,48,49,181,50,62,180,62,50,71,50,42,84,150,73,173,40,52,172,52,40,175,39,53,174,53,39,172,41,171,173,174,40,132,130,131,176,38,175,68,151,152,153,152,151,38,177,75,164,162,165,131,134,132,131,56,57,134,133,138,136,138,133,136,135,137,151,150,153,84,153,150,75,72,71,85,71,72,85,180,50,183,49,63,182,63,49,61,179,85,180,85,179,186,65,47,66,67,154,152,154,67,62,180,181,157,154,159,155,159,154,152,67,68,73,74,84,151,68,61,85,50,71,151,85,72,130,72,75,129,72,130,61,85,151,143,144,77,78,77,144,231,96,230,207,230,96,204,95,232,205,232,95,206,96,231,130,75,55,133,134,131,188,211,99,226,99,211,228,227,191,88,191,227,164,168,163,166,92,199,102,199,92,153,155,152,154,152,155,26,160,163,161,163,160,155,84,83,145,149,146,98,187,86,144,86,187,208,97,230,145,230,97,88,190,191,189,144,87,188,87,144,88,227,190,189,190,227,193,215,194,216,194,215,192,89,228,193,228,89,80,227,228,229,82,228,233,19,234,194,228,193,195,229,90,228,90,229,166,167,170,197,229,91,196,91,229,166,170,169,168,169,170,165,229,197,168,164,169,220,217,221,216,221,217,93,201,200,101,220,103,93,103,220,90,194,216,222,104,203,204,203,104,231,232,205,192,191,214,205,95,223,104,223,95,230,13,231,188,187,211,225,105,207,208,207,105,146,12,230,210,98,86,99,226,105,97,105,226,213,224,214,223,214,224,188,99,87,189,87,99,99,212,189,190,189,212,206,223,224,214,100,89,193,89,100,221,215,222,201,93,220,217,101,91,197,91,101,197,101,218,103,218,101,197,218,198,200,103,93,223,104,100,203,94,222,221,222,94,204,104,95,212,99,105,96,225,207,208,105,97,120,122,110,111,110,122,108,109,115,113,33,114,113,109,0,45,125,124,112,124,125,46,126,125,112,125,126,126,32,112,124,112,111,114,109,113,117,36,119,116,117,119,123,121,43,121,119,42,122,120,121,123,122,121,132,76,129,132,129,130,137,138,136,141,77,134,139,6,142,140,139,142,141,143,77,147,149,148,145,148,149,147,143,142,209,145,97,230,145,146,151,72,150,84,155,153,162,155,83,158,156,157,159,158,157,164,161,162,163,161,164,229,165,82,166,234,167,20,167,234,169,92,166,178,55,177,181,182,49,186,47,185,188,144,187,212,213,190,192,228,191,192,214,89,215,193,100,228,194,90,195,90,216,196,229,195,196,217,91,216,196,195,198,165,197,219,103,200,219,200,199,94,202,221,220,221,202,220,202,201,232,17,233,213,212,225,105,225,212,206,231,205,225,96,206,223,206,205,208,230,207,226,209,97,210,145,209,226,210,209,224,213,225,214,223,100,216,215,221,216,217,196,217,220,101,219,218,103,225,206,224,133,58,51,136,133,51,66,154,65,154,157,65,77,74,76,77,78,74,74,83,84,74,82,83,74,80,82,78,80,74,78,227,80,148,145,86,86,145,210,198,92,165,198,102,92,218,102,198,199,102,219,219,102,218,98,211,187,210,226,98,226,211,98,177,178,75,178,55,75,7,8,147,142,7,147,163,168,25,25,168,24,168,170,24,170,23,24,170,167,23,167,22,23,128,65,157,128,157,156,51,127,136,127,135,136,162,159,155,159,162,161,159,161,158,158,161,160,9,146,149,9,10,146,147,8,149,8,9,149,72,129,73,72,73,150,132,134,76,134,77,76,3,4,139,137,3,139,137,139,140,137,140,138,138,140,141,138,141,134,158,160,29,29,160,28,48,183,184,48,184,64,33,127,51,33,51,41,47,65,46,65,128,46,204,232,233,204,233,203,203,233,94,94,233,234,94,234,202,202,234,201,234,93,201,93,234,166,200,93,166,199,200,166,235,236,106,235,106,239,236,107,106,239,106,110,236,237,107,239,110,240,237,108,107,240,110,111,237,238,108,240,111,241,108,238,109,241,111,112,238,242,109,241,112,258,109,242,0,112,32,258,16,15,250,16,250,17,17,250,251,15,249,250,14,249,15,17,251,18,14,13,249,12,248,13,13,248,249,11,248,12,11,247,248,10,247,11,9,247,10,9,246,247,8,246,9,8,245,246,6,245,7,7,245,8,6,244,245,4,244,5,5,244,6,4,243,244,2,243,3,3,243,4,1,243,2,0,242,243,0,243,1,18,251,19,19,251,252,19,252,20,20,252,21,21,252,253,21,253,22,22,253,23,23,253,254,23,254,24,24,254,25,25,254,255,25,255,26,26,255,27,27,255,256,27,256,28,28,256,29,29,256,257,30,29,257,30,257,31,32,257,258,32,31,257,113,0,127,113,127,33,126,46,128,126,128,32,2,3,137,135,2,137,156,158,30,30,158,29,0,1,135,0,135,127,128,156,32,32,156,31,143,148,86,143,86,144,165,92,164,164,92,169,279,259,266,279,266,280,280,266,260,260,266,281,281,266,265,281,265,282,282,265,261,261,265,283,283,265,264,283,264,284,284,264,262,262,264,285,285,264,286,286,264,263,287,269,276,288,287,276,288,276,270,270,276,289,289,276,290,290,276,271,271,276,275,271,275,291,291,275,292,292,275,274,292,274,272,272,274,293,293,274,294,294,274,273,301,299,295,301,295,303,303,295,305,305,295,307,307,295,309,309,295,311,311,295,310,310,295,308,308,295,306,295,304,306,295,302,304,295,300,302,295,298,300,295,296,298,295,297,296,295,299,297,316,314,312,314,313,312,313,315,312,312,317,319,312,319,321,312,321,323,312,323,325,312,325,327,312,327,328,326,312,328,324,312,326,322,312,324,320,312,322,318,312,320,316,312,318,312,315,317
		};
		m_numOfSimpleFaceMeshTri = (short3D)simpleMeshIndex.size() / 3;
		if (m_pSimpleFaceMeshV == nullptr || m_pSimpleFaceMeshVt == nullptr || m_pSimpleFaceMeshTriIndex == nullptr)
		{
			m_pSimpleFaceMeshV = new float[m_numOfSimpleFaceMeshV * 3];
			m_pSimpleFaceMeshVt = new float[m_numOfSimpleFaceMeshV * 2];
			m_pSimpleFaceMeshTriIndex = new short3D[m_numOfSimpleFaceMeshTri * 3];
		}
		memcpy(m_pSimpleFaceMeshTriIndex, simpleMeshIndex.data(), sizeof(short3D)*m_numOfSimpleFaceMeshTri * 3);
	}

	bool MultiSimpleFaceBackMesh::UpdateSimpleFaceMesh(const float* pImagePoint)
	{
		if (pImagePoint == nullptr)
		{
			return false;
		}
		//FA点插值
		float* imagePoint = new float[m_nNumOfFacePt * 2];
		FaceInterlation::RunFaceAndBackPointInterpolation(pImagePoint, m_numLandmark, m_nNumOfFacePt, m_IsNonLine, 1.50f, 0.73f, m_facePitchAngle, m_heightFace,false, imagePoint);
	
		//构建新的V，VtImage
		for (int indexPoint = 0; indexPoint < m_nNumOfFacePt; indexPoint++)
		{
			m_pSimpleFaceMeshV[indexPoint * 3 + 0] = imagePoint[indexPoint * 2 + 0] / m_widthImage * 2.0f - 1.0f;
			m_pSimpleFaceMeshV[indexPoint * 3 + 1] = imagePoint[indexPoint * 2 + 1] / m_heightImage * 2.0f - 1.0f;
			m_pSimpleFaceMeshV[indexPoint * 3 + 2] = 0.5f;

		}
		//更新五官点的深度值
		for (int i = 33; i < 70; i++)
		{
			m_pSimpleFaceMeshV[i * 3 + 2] = 0.5f;
		}
		for (int i = 171; i <= 186; i++)
		{
			m_pSimpleFaceMeshV[i * 3 + 2] = 0.5f;
		}
		for (int i = 71; i <= 105; i++)
		{
			m_pSimpleFaceMeshV[i * 3 + 2] = 0.1f;
		}
		for (int i = 187; i <= 226; i++)
		{
			m_pSimpleFaceMeshV[i * 3 + 2] = 0.1f;
		}

		//构建新的Vt
		std::vector<float> simpleFaceMeshVt = {
			0.256076f,0.406814f,0.255949f,0.43058f,0.258588f,0.454103f,0.263865f,0.477664f,0.271024f,0.500962f,0.279062f,0.52376f,0.287776f,0.546334f,0.297644f,0.568777f,0.310378f,0.590825f,0.326466f,0.61138f,0.345475f,0.630467f,0.366345f,0.64842f,0.388709f,0.664922f,0.412382f,0.680309f,0.438038f,0.69385f,0.467653f,0.70301f,0.500571f,0.706006f,0.533463f,0.702785f,0.563204f,0.693337f,0.588967f,0.679638f,0.612628f,0.663858f,0.634678f,0.646746f,0.654767f,0.628277f,0.672806f,0.608829f,0.687848f,0.588148f,0.699305f,0.565892f,0.70759f,0.543074f,0.714175f,0.520211f,0.720223f,0.497093f,0.725717f,0.47372f,0.730169f,0.450201f,0.732836f,0.42669f,0.733178f,0.402981f,0.295074f,0.374934f,0.322308f,0.35262f,0.36f,0.345467f,0.398952f,0.345414f,0.435791f,0.350652f,0.43242f,0.368313f,0.397795f,0.365922f,0.361837f,0.365549f,0.327007f,0.368987f,0.546799f,0.34936f,0.582209f,0.344105f,0.619879f,0.34362f,0.656608f,0.349449f,0.684211f,0.370536f,0.652556f,0.366387f,0.618554f,0.363986f,0.583647f,0.364489f,0.550263f,0.366959f,0.34186f,0.418539f,0.3633f,0.408481f,0.390825f,0.405556f,0.418121f,0.411002f,0.437103f,0.425555f,0.412767f,0.427348f,0.387287f,0.42876f,0.36291f,0.42528f,0.389052f,0.416033f,0.389495f,0.416967f,0.548418f,0.425091f,0.565712f,0.410647f,0.59169f,0.404299f,0.618782f,0.406217f,0.640644f,0.415744f,0.621073f,0.423422f,0.597499f,0.427662f,0.572425f,0.426676f,0.593893f,0.414697f,0.594398f,0.415748f,0.49243f,0.409463f,0.493162f,0.446094f,0.493811f,0.482155f,0.494678f,0.517317f,0.460615f,0.419104f,0.45062f,0.500501f,0.433747f,0.523752f,0.449101f,0.538759f,0.46541f,0.534947f,0.495438f,0.545344f,0.525572f,0.534182f,0.543409f,0.537142f,0.557688f,0.521911f,0.538983f,0.499116f,0.525527f,0.418317f,0.405311f,0.57909f,0.439546f,0.576235f,0.473938f,0.572094f,0.497166f,0.574456f,0.520328f,0.571543f,0.556663f,0.5746f,0.592137f,0.5772f,0.571078f,0.602334f,0.541152f,0.621806f,0.498386f,0.629103f,0.456129f,0.622009f,0.426938f,0.603173f,0.417942f,0.582056f,0.442998f,0.582822f,0.497543f,0.585391f,0.553785f,0.581295f,0.580466f,0.58014f,0.557404f,0.594073f,0.497794f,0.605923f,0.440429f,0.594812f,0.487917f,0.205642f,0.382475f,0.225154f,0.308687f,0.265187f,0.266554f,0.32574f,0.595309f,0.222765f,0.671983f,0.261363f,0.717939f,0.321435f,0.28157f,0.371471f,0.280493f,0.33246f,0.315498f,0.308904f,0.387912f,0.26484f,0.39335f,0.304526f,0.470715f,0.253495f,0.453514f,0.301349f,0.507348f,0.253069f,0.526779f,0.300496f,0.590986f,0.262807f,0.586663f,0.30285f,0.664295f,0.305406f,0.687274f,0.335442f,0.70075f,0.367205f,0.298968f,0.412676f,0.686911f,0.409363f,0.471891f,0.473298f,0.454497f,0.449426f,0.408187f,0.452435f,0.429087f,0.476109f,0.372183f,0.45326f,0.402505f,0.48798f,0.294306f,0.438064f,0.332663f,0.445548f,0.309616f,0.481068f,0.355368f,0.484473f,0.311705f,0.506659f,0.352385f,0.512357f,0.393066f,0.518055f,0.339437f,0.550018f,0.391098f,0.553702f,0.442758f,0.557386f,0.392452f,0.601969f,0.379593f,0.624848f,0.339942f,0.570681f,0.38224f,0.572585f,0.351415f,0.596397f,0.516073f,0.472605f,0.532245f,0.448848f,0.578189f,0.451242f,0.558879f,0.474822f,0.613268f,0.450779f,0.585893f,0.485814f,0.693379f,0.43464f,0.653921f,0.442589f,0.679575f,0.477711f,0.633433f,0.481702f,0.679589f,0.503297f,0.638956f,0.509502f,0.598322f,0.515706f,0.655597f,0.547297f,0.603604f,0.55152f,0.551612f,0.555743f,0.606175f,0.60015f,0.620214f,0.6231f,0.656703f,0.568178f,0.6141f,0.570464f,0.647012f,0.594149f,0.349f,0.41421f,0.356548f,0.410747f,0.37287f,0.406419f,0.381643f,0.405555f,0.400573f,0.40624f,0.409508f,0.407983f,0.424934f,0.414649f,0.431426f,0.419572f,0.553564f,0.419208f,0.559537f,0.414291f,0.573961f,0.407361f,0.582413f,0.405346f,0.60078f,0.403967f,0.609497f,0.404531f,0.625815f,0.408346f,0.633416f,0.411598f,0.416811f,0.57827f,0.428287f,0.577312f,0.451163f,0.57498f,0.462563f,0.573606f,0.481701f,0.573467f,0.489451f,0.574254f,0.504914f,0.574071f,0.512627f,0.5731f,0.532281f,0.572593f,0.54424f,0.5736f,0.568177f,0.575485f,0.580154f,0.576364f,0.586095f,0.586213f,0.579072f,0.594595f,0.562077f,0.609464f,0.552106f,0.61595f,0.526999f,0.625837f,0.512838f,0.628269f,0.484497f,0.628337f,0.470316f,0.625972f,0.44552f,0.616281f,0.435766f,0.609983f,0.418827f,0.595676f,0.411641f,0.587668f,0.431222f,0.58243f,0.457767f,0.583396f,0.471031f,0.583988f,0.484289f,0.584653f,0.511325f,0.584178f,0.525123f,0.583099f,0.538936f,0.582157f,0.566608f,0.580677f,0.56873f,0.588121f,0.542807f,0.599662f,0.528619f,0.603223f,0.513615f,0.60531f,0.482708f,0.60529f,0.468333f,0.60332f,0.454668f,0.600011f,0.429473f,0.589379f,0.469444f,0.557187f,0.496129f,0.556989f,0.523871f,0.556366f,0.412238f,0.637452f,0.454177f,0.659911f,0.499479f,0.667554f,0.545101f,0.659587f,0.587352f,0.636661f,0.484758f,0.0629674f,0.300009f,0.086923f,0.180067f,0.164194f,0.153617f,0.283879f,0.672468f,0.0827415f,0.79767f,0.157692f,0.830694f,0.27742f,0.161112f,0.383889f,0.164628f,0.450095f,0.182039f,0.515697f,0.205492f,0.579217f,0.237135f,0.641505f,0.286271f,0.697004f,0.346798f,0.74524f,0.415859f,0.78574f,0.503405f,0.802758f,0.591091f,0.785022f,0.660284f,0.743751f,0.719279f,0.693938f,0.765592f,0.637757f,0.793231f,0.574654f,0.810917f,0.51028f,0.824842f,0.444632f,0.829054f,0.378524f,0.34186f,0.862088f,0.3633f,0.852029f,0.390825f,0.849104f,0.418121f,0.854551f,0.437103f,0.869103f,0.412767f,0.870896f,0.387287f,0.872309f,0.36291f,0.868829f,0.389052f,0.859581f,0.389495f,0.860515f,0.548418f,0.868639f,0.565712f,0.854196f,0.59169f,0.847847f,0.618782f,0.849765f,0.640644f,0.859293f,0.621073f,0.86697f,0.597499f,0.87121f,0.572425f,0.870224f,0.593893f,0.858246f,0.594398f,0.859297f,0.349f,0.857759f,0.356548f,0.854295f,0.37287f,0.849968f,0.381643f,0.849103f,0.400573f,0.849788f,0.409508f,0.851532f,0.424934f,0.858198f,0.431426f,0.863121f,0.553564f,0.862756f,0.559537f,0.85784f,0.573961f,0.850909f,0.582413f,0.848894f,0.60078f,0.847515f,0.609497f,0.848079f,0.625815f,0.851895f,0.633416f,0.855146f,0.389052f,0.940226f,0.368281f,0.940226f,0.370358f,0.934047f,0.370358f,0.946406f,0.374512f,0.930103f,0.374512f,0.95035f,0.381782f,0.926947f,0.381782f,0.953506f,0.389052f,0.92605f,0.389052f,0.954403f,0.396322f,0.926947f,0.396322f,0.953506f,0.403591f,0.930103f,0.403591f,0.95035f,0.407746f,0.934047f,0.407746f,0.946406f,0.409823f,0.940226f,0.593893f,0.938891f,0.573421f,0.938891f,0.575468f,0.932801f,0.575468f,0.944981f,0.579563f,0.928913f,0.579563f,0.948869f,0.586728f,0.925803f,0.586728f,0.951979f,0.593893f,0.924919f,0.593893f,0.952863f,0.601058f,0.925803f,0.601058f,0.951979f,0.608223f,0.928913f,0.608223f,0.948869f,0.612318f,0.932801f,0.612318f,0.944981f,0.614365f,0.938891f
		};
		memcpy(m_pSimpleFaceMeshVt, simpleFaceMeshVt.data(), sizeof(float)*simpleFaceMeshVt.size());

		//利用现有的FA点映射出landmark0,16,32的Vt值
		//FA点坐标归一化
		float* ImagePointVtCoord = new float[2 * m_nNumOfFacePt];
		FacePointCoorTransform(imagePoint, ImagePointVtCoord);
		//轮廓线Vt更新和插值
		FaceContourLineVtUpdate(m_pSimpleFaceMeshVt, ImagePointVtCoord, m_numLandmark);
		FaceCourtonLineVtInterpolation(m_pSimpleFaceMeshVt, m_numLandmark);
		//Vt插值
		FaceInterlation::RunFacePointVtInterpolation(m_pSimpleFaceMeshVt, m_nNumOfFacePt, 0.75f,false, m_pSimpleFaceMeshVt);
		for (int i = 0; i < 33; i++)
		{
			m_pSimpleFaceMeshVt[2 * i] = simpleFaceMeshVt[2 * i];
			m_pSimpleFaceMeshVt[2 * i + 1] = simpleFaceMeshVt[2 * i + 1];
		}
		//眼球点网格重建
		int PointIndex = 259;
		for (int i = 51; i < 71; i++)
		{
			m_pSimpleFaceMeshV[PointIndex * 3 + 0] = imagePoint[i * 2 + 0] / m_widthImage * 2.0f - 1.0f;
			m_pSimpleFaceMeshV[PointIndex * 3 + 1] = imagePoint[i * 2 + 1] / m_heightImage * 2.0f - 1.0f;
			m_pSimpleFaceMeshV[PointIndex * 3 + 2] = 0.8f;
			PointIndex++;
		}
		for (int i = 171; i <= 186; i++)
		{
			m_pSimpleFaceMeshV[PointIndex * 3 + 0] = imagePoint[i * 2 + 0] / m_widthImage * 2.0f - 1.0f;
			m_pSimpleFaceMeshV[PointIndex * 3 + 1] = imagePoint[i * 2 + 1] / m_heightImage * 2.0f - 1.0f;
			m_pSimpleFaceMeshV[PointIndex * 3 + 2] = 0.8f;
			PointIndex++;
		}
		
		//眼瞳点网格重建
		short3D NumOfEyePuipleMeshV = 34;
		float* EyePupilPoint = new float[NumOfEyePuipleMeshV * 2];
		EyePupilInterlation::RunEyePupilInterlation(pImagePoint, m_numLandmark+12, NumOfEyePuipleMeshV, EyePupilPoint);


		for (int indexPoint = 0; indexPoint < NumOfEyePuipleMeshV; indexPoint++)
		{
			m_pSimpleFaceMeshV[PointIndex * 3 + 0] = EyePupilPoint[indexPoint * 2 + 0] / m_widthImage * 2.0f - 1.0f;
			m_pSimpleFaceMeshV[PointIndex * 3 + 1] = EyePupilPoint[indexPoint * 2 + 1] / m_heightImage * 2.0f - 1.0f;
			m_pSimpleFaceMeshV[PointIndex * 3 + 2] = 0.6f;
			PointIndex++;
		}
		
		delete[] imagePoint;
		delete[] ImagePointVtCoord;
		delete[] EyePupilPoint;
		return true;
	}


}

