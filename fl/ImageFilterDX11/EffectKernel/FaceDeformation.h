#ifndef __FACE_DEFORMATION_H__
#define __FACE_DEFORMATION_H__

//#include "ShaderProgramManager.h"
#include "DX11ImageFilterDef.h"
#include "Algorithm/StackBlur.h"
#include "BaseDefine/Vectors.h"
#include "BaseDefine/Define.h"
#include "Toolbox/xmlParser.h"
#include "Toolbox/stb_image_write.h"
#include <vector>
#include <string>

struct PointInfo
{
	Vector2 point;
	bool isControl;
	bool isMultiControl;
};

struct MLSParam 
{
	float *pSrcX;
	float *pSrcY;
	float *pDstX;
	float *pDstY;

	int width;
	int height;
	int shiftWidth;
	int shiftHeight;
	int pointCount;

};

struct CCFace2DMesh
{
	//The point num
	int nVertex;
	//The mesh points of face
	PointInfo *pDstVertexs;//[nVertex*2]

	//The triangle num
	int nTriangle;
	//Zero-based index of the triangle
	unsigned short *pTriangleIndex;//[nTriangle*3]

};

class MAGICSTUDIO_EXPORTS_CLASS FaceDeformation
{

public:
	static FaceDeformation& Instance()
	{
		static FaceDeformation instance;
		return instance;
	}
	FaceDeformation();
	virtual ~FaceDeformation();

	int Init();

	void SetControlIndex(unsigned short index, bool iSymmetry);
	void SetFreeIndex(unsigned short index, bool iSymmetry);

	void SetMultiControlIndex(unsigned short index, bool iSymmetry);
	CCFace2DMesh& GetFaceMesh();

	int GetSymmetryIndex(int index);

	void SetFreeMultiControlIndex(unsigned short index, bool iSymmetry);
	void SetControlPoint(unsigned short indexDst, Vector2& posDst, bool iSymmetry, bool isXlock, bool isYLock);

	BYTE *GetOffsetTexture();

	void SetSmoothRadius(float &radius);

	void updateOffest();

	void setAlphaPath(std::string path);

	void ReadConfig(XMLNode &childNode);

	void WriteConfig(XMLNode &nodeEffect);
private:

	void MLSControlPoint(Vector2* pSrc, Vector2* pDst, int nCount);

	void RunMLSSP(MLSParam &param);

	void CreateOffset();

public:
	Vector2 *m_pShiftRGBA;
	BYTE *m_pOffestTexture;
	BYTE *m_pAlpha = NULL;
	CCFace2DMesh m_FaceMesh;
	std::string m_AlphaPath = "./Resources/assets/Alpha.png";

	float m_SmoothRadius = 6.0;
	float m_ShapeAlpha = 1.0;
private:
	
	CStackBlur *m_StackBlur;
	

	int m_SmallTextureHeight = 80;
	int m_SmallTextureWidth = 80;
	int nWidth = 1500;
	int nHeight = 1500;

	std::vector<PointInfo> m_SrcMeshPoint;
	std::vector<PointInfo> m_DstMeshPoint;
	
	std::vector<float> m_StandFacePoint = { 
		0.363766,0.248192,0.636450,0.242596,0.324954,0.300275,0.679494,0.297693,0.298123,0.401860,0.701016,0.400138,0.289514,0.501722,0.709625,0.500861,0.341167,0.639463,0.659694,0.632576,0.372159,0.679924,0.644054,0.672176,0.414342,0.714360,0.606175,0.712351,0.456956,0.742195,0.562557,0.739899,0.314787,0.108914,0.664551,0.111865,0.271989,0.193034,0.707350,0.191558,0.230667,0.294864,0.753099,0.290437,0.218861,0.384888,0.782615,0.383412,0.215909,0.488194,0.779664,0.488194,0.233619,0.597403,0.755251,0.598140,0.269038,0.681523,0.732438,0.668733,0.331135,0.755880,0.679637,0.757117,0.399564,0.805326,0.608902,0.806474,0.405833,0.294183,0.596551,0.295772,0.373252,0.330737,0.633106,0.333121,0.369576,0.548209,0.631428,0.549357,0.333604,0.394480,0.667872,0.388577,0.359430,0.376033,0.643521,0.371606,0.369761,0.401859,0.635490,0.395900,0.447917,0.400999,0.559831,0.400138,0.474604,0.455234,0.536870,0.454759,0.482659,0.502952,0.525458,0.502952,0.466426,0.541322,0.541626,0.541930,0.450192,0.567887,0.557925,0.568625,0.467164,0.587072,0.543905,0.587810,0.488636,0.590220,0.523760,0.589532,0.358471,0.449036,0.644284,0.444215,0.373623,0.442149,0.633264,0.437328,0.387397,0.437328,0.616736,0.431130,0.400482,0.433196,0.602961,0.428375,0.419766,0.435950,0.586433,0.431818,0.434917,0.442149,0.573347,0.441460,0.448691,0.456612,0.561639,0.453857,0.372934,0.457989,0.631887,0.452479,0.385331,0.461433,0.621556,0.456612,0.399793,0.466253,0.607782,0.460744,0.417011,0.465565,0.591942,0.460055,0.432163,0.461433,0.577479,0.457989,0.436983,0.641185,0.571281,0.640496,0.459022,0.634986,0.553375,0.634297,0.481749,0.629477,0.529959,0.630165,0.454804,0.652376,0.556818,0.650826,0.469439,0.643767,0.537448,0.645489,0.469353,0.667355,0.539601,0.668733,0.431703,0.684803,0.584366,0.685950,0.508178,0.845213,0.508178,0.756543,0.507340,0.674532,0.505709,0.649522,0.506253,0.628317,0.507549,0.592975,0.504622,0.553828,0.504078,0.479883,0.503534,0.447260,0.503616,0.410124,0.502870,0.357668,0.502870,0.207300,0.501722,0.069559,0.502870,0.288797,0.424816,0.227961,0.578627,0.225666,0.310176,0.345902,0.692407,0.345041,0.291236,0.454373,0.708764,0.446625,0.299845,0.550792,0.693268,0.547348,0.317924,0.590393,0.680355,0.589532,
	};
	std::vector<unsigned short>m_ControlIndex = {108,104,84,85};
	std::vector<unsigned short> m_StandIndex = {
		0,34,2,34,0,112,0,18,16,18,0,2,1,19,3,19,1,17,2,36,114,36,2,34,111,112,109,112,111,34,18,2,20,37,3,115,3,37,35,46,42,36,42,46,44,1,3,35,3,19,21,40,114,42,114,40,4,20,2,114,46,34,108,34,46,36,115,41,43,41,115,5,115,23,5,23,115,21,60,116,40,116,60,6,43,47,37,47,43,45,6,24,116,117,61,5,61,117,7,7,25,27,25,7,117,120,38,8,38,120,118,37,47,35,28,120,8,120,28,26,84,38,54,38,84,8,39,121,9,121,39,119,29,11,9,11,29,31,8,10,28,10,8,84,38,52,54,52,38,80,28,10,30,104,50,51,50,104,52,9,11,85,10,12,30,12,10,96,97,95,91,95,97,15,104,56,52,56,104,58,11,13,97,13,11,31,13,31,33,12,14,32,14,12,96,94,90,92,90,94,96,99,33,98,33,99,15,15,100,95,100,15,99,13,15,97,15,13,33,112,16,110,16,112,0,17,1,113,110,109,112,109,110,113,114,22,20,22,114,4,3,21,115,22,4,116,5,23,117,22,116,24,117,23,25,7,27,119,30,12,32,111,113,35,113,111,109,108,111,35,111,108,34,1,35,113,40,116,4,42,114,36,61,41,5,41,61,45,115,43,37,6,38,118,38,6,74,39,85,55,85,39,9,52,56,54,7,39,75,39,7,119,60,40,44,44,40,42,41,45,43,62,44,64,44,62,60,64,76,62,76,64,78,46,108,107,67,79,81,79,67,65,44,46,66,35,47,108,107,48,46,48,107,106,108,47,107,47,45,67,79,65,77,46,48,70,105,50,48,50,105,51,62,76,74,106,105,48,105,106,49,47,49,107,49,47,71,77,65,63,48,50,72,39,55,53,80,66,68,66,80,78,49,51,105,51,49,73,39,81,79,81,39,53,50,52,82,86,56,88,56,86,84,104,51,53,53,51,83,84,54,56,53,55,57,55,85,57,53,57,59,96,94,14,57,87,89,87,57,85,58,104,103,53,59,104,89,103,59,103,89,102,56,58,88,92,86,88,86,92,90,104,59,103,59,57,89,74,6,60,7,75,61,45,61,63,64,44,66,66,78,64,60,62,74,63,61,75,45,65,67,65,45,63,77,63,75,66,46,68,78,38,76,38,78,80,47,67,69,68,46,70,71,47,69,69,67,81,68,70,82,70,48,72,52,80,82,49,71,73,71,69,81,81,53,83,70,72,82,72,50,82,73,71,83,51,73,83,38,74,76,75,39,77,80,68,82,77,39,79,71,81,83,10,84,96,11,97,85,87,93,89,93,87,91,84,86,90,87,85,91,14,100,99,100,14,94,91,95,93,88,58,102,102,101,88,101,102,89,84,90,96,91,85,97,101,93,95,93,101,89,92,88,101,94,101,100,101,94,92,101,95,100,102,58,103,49,106,107,113,110,17,26,118,120,119,27,121,14,32,99,99,32,98,121,9,29,121,27,29,6,118,26,6,24,26,
	};

	
};


#endif