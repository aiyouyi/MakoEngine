// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.7.1
// Generated from `VirtualInteractiveGameStruct.jce'
// **********************************************************************

#ifndef __CC_VIRTUALINTERACTIVEGAMESTRUCT_USERID_H_
#define __CC_VIRTUALINTERACTIVEGAMESTRUCT_USERID_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"



namespace CC
{
    struct UserId : public taf::JceStructBase
    {
    public:
        static std::string className()
        {
            return "CC.UserId";
        }
        static std::string MD5()
        {
            return "c56e888356e7b15a2b15cffc87d28245";
        }
        UserId(taf::Int64 lUid,const std::string &sGuid,const std::string &sToken,const std::string &sHuYaUA,const std::string &sCookie,taf::Int32 iTokenType)
            :lUid(lUid),sGuid(sGuid),sToken(sToken),sHuYaUA(sHuYaUA),sCookie(sCookie),iTokenType(iTokenType)
        {
        }
        UserId()
        :lUid(0),sGuid(""),sToken(""),sHuYaUA(""),sCookie(""),iTokenType(0)
        {
        }
        void resetDefautlt()
        {
            lUid = 0;
            sGuid = "";
            sToken = "";
            sHuYaUA = "";
            sCookie = "";
            iTokenType = 0;
        }
        template<typename WriterT>
        void writeTo(WriterT& _os) const
        {
            _os.write(lUid, 0);
            _os.write(sGuid, 1);
            _os.write(sToken, 2);
            _os.write(sHuYaUA, 3);
            _os.write(sCookie, 4);
            _os.write(iTokenType, 5);
        }
        template<typename ReaderT>
        void readFrom(ReaderT& _is)
        {
            resetDefautlt();
            _is.read(lUid, 0, false);
            _is.read(sGuid, 1, false);
            _is.read(sToken, 2, false);
            _is.read(sHuYaUA, 3, false);
            _is.read(sCookie, 4, false);
            _is.read(iTokenType, 5, false);
        }
        std::ostream& display(std::ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lUid,"lUid");
            _ds.display(sGuid,"sGuid");
            _ds.display(sToken,"sToken");
            _ds.display(sHuYaUA,"sHuYaUA");
            _ds.display(sCookie,"sCookie");
            _ds.display(iTokenType,"iTokenType");
            return _os;
        }
        std::ostream& displaySimple(std::ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lUid, true);
            _ds.displaySimple(sGuid, true);
            _ds.displaySimple(sToken, true);
            _ds.displaySimple(sHuYaUA, true);
            _ds.displaySimple(sCookie, true);
            _ds.displaySimple(iTokenType, false);
            return _os;
        }
    public:
        taf::Int64 lUid;
        std::string sGuid;
        std::string sToken;
        std::string sHuYaUA;
        std::string sCookie;
        taf::Int32 iTokenType;
    };
    inline bool operator==(const UserId&l, const UserId&r)
    {
        return l.lUid == r.lUid && l.sGuid == r.sGuid && l.sToken == r.sToken && l.sHuYaUA == r.sHuYaUA && l.sCookie == r.sCookie && l.iTokenType == r.iTokenType;
    }
    inline bool operator!=(const UserId&l, const UserId&r)
    {
        return !(l == r);
    }
}

#define CC_UserId_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lUid,b.lUid);jce_copy_struct(a.sGuid,b.sGuid);jce_copy_struct(a.sToken,b.sToken);jce_copy_struct(a.sHuYaUA,b.sHuYaUA);jce_copy_struct(a.sCookie,b.sCookie);jce_copy_struct(a.iTokenType,b.iTokenType);


#endif
