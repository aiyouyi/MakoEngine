// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.7.7
// Generated from `HuyaVirtualActor.jce'
// **********************************************************************

#ifndef __CCVIRTUALACTOR_CCVIRTUALACTOR_CCVIRTUALACTORPACKET_H_
#define __CCVIRTUALACTOR_CCVIRTUALACTOR_CCVIRTUALACTORPACKET_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"



namespace HuyaVirtualActor
{
    struct HuyaVirtualActorPacket : public taf::JceStructBase
    {
    public:
        static std::string className()
        {
            return "HuyaVirtualActor.HuyaVirtualActorPacket";
        }
        static std::string MD5()
        {
            return "df201b8c862e87f66d7cb4f7e7a56348";
        }
        HuyaVirtualActorPacket(taf::UInt32 type,const std::vector<taf::Char> &data)
            :type(type),data(data)
        {
        }
        HuyaVirtualActorPacket()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(WriterT& _os) const
        {
            _os.write(type, 0);
            _os.write(data, 1);
        }
        template<typename ReaderT>
        void readFrom(ReaderT& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(data, 1, false);
        }
        std::ostream& display(std::ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(data,"data");
            return _os;
        }
        std::ostream& displaySimple(std::ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(data, false);
            return _os;
        }
    public:
        taf::UInt32 type;
        std::vector<taf::Char> data;
    };
    inline bool operator==(const HuyaVirtualActorPacket&l, const HuyaVirtualActorPacket&r)
    {
        return l.type == r.type && l.data == r.data;
    }
    inline bool operator!=(const HuyaVirtualActorPacket&l, const HuyaVirtualActorPacket&r)
    {
        return !(l == r);
    }
}

#define HuyaVirtualActor_HuyaVirtualActorPacket_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.data,b.data);


#endif
